#include <iostream>
#include <vector>
#include <unordered_set>
#include <cassert>

using namespace std;

bool canPartition(vector<int>& nums) {
    int sum = 0;
    for (auto n : nums)
        sum += n;
    if (sum % 2 != 0) return false;
    unordered_set<int> s;
    int target = sum / 2;
    s.insert(0);
    s.insert(nums[0]);
    for (int i = 1; i < nums.size(); i++) {
        vector<int> v;
        for (auto x : s)
            v.push_back(x + nums[i]);
        for (auto x : v)
            s.insert(x);
    }

    return s.find(target) != s.end();
}

int main () {
    std::vector<int> v1{1,5,11,5};
    assert(canPartition(v1) == true);

    std::vector<int> v2{1,2,3,5};
    assert(canPartition(v2) == false);

    std::vector<int> v3{};
    assert(canPartition(v3) == false);
    return 0;
}
